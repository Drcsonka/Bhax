<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Caesar!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title><type>double **</type> háromszögmátrix</title>
        <para>
           
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: https://github.com/Drcsonka/Prog1/blob/master/haromszog.c               
        </para>
        <para>
	    A mátrix n darab oszlopból és m darab sorból álló táblázatok. Egy mátrix akkor  	        háromszögmátrix, ha a főátlója alatt vagy felett csak 0 található.
            A "malloc" függvénnyel memóriát foglalunk le, mi adjuk meg mekkora ez a terület.
	    Ez után vagy a lefoglalt memória kezdőcímét vagy NULL értéket ad vissza.
	    Egy for ciklussal végigmegyunk a lefoglalt teruleten és minden double tipusú teruletre állítunk egy mutatót, majd ezek a mutatók alkotják a háromszögmátrixot.
            A "free" függvénnyel felszabadítjuk a lefoglalt memóriát.

        </para> 
             <mediaobject>
                  <imageobject>
                      <imagedata fileref="images/pointer.png" scale="150"/>
                  </imageobject>
      </mediaobject>    
        <para>
            Deklarálunk egy 'double **tm' változót. A 'double' változók 8 bájtosak. A 'double **tm' változó egy 'double *'-ra mutat, vagyis annak memóriacímére.
            A 'tm+1' azt jelenti, hogy a 'tm'-nél eggyel arréb mutat, vagyis 4 bájtal arréb. A '*(tm+1)'-el a benne lévő értéket kapjuk.
        </para>      
    </section>        
    <section>
        <title>C EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót C-ben!
        </para>
        <para>
            Megololdás videó:
        </para>
        <para>
            Megoldás forrása:  https://github.com/Drcsonka/Prog1/blob/master/exor_titkosito_c.c              
        </para>
        <para>
            A kizáró vagyok titkosítást fogjuk használni. Ez a művelet amikor egymáshoz 
	    hasonlítjuk a szöveg bájtját és a titkósító kulcs bájtjait akkor 1-et ad vissza
	    ha a kettó különböző és 0-t ha megegyeznek.
	    A program elején megadjuk a titkosítani szánt szöveg méretét, ez alapján a program
	    generál egy megfelelő méretű kulcsot. Ezután a kettő összehasonlításával megalkotja a titkosított szöveget.
    </para>
    <para>
        Futtatás:
        <screen><![CDATA[
        gcc exor_titkosito_.c -o exor
        ./exor 42351234 <tiszta.txt >titkos.txt
        ]]></screen>
        </para>            
    </section>        
    <section>
        <title>Java EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót Java-ban!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:https://github.com/Drcsonka/Prog1/blob/master/ExorTitkosito.class
https://github.com/Drcsonka/Prog1/blob/master/ExorTitkosito.java                
        </para>
        <para>
            Ez a feladat az előző Exor titkosítás csak Java programozási nyelven.
        </para>            
    </section>        
    <section>
        <title>C EXOR törő</title>
        <para>
            Írj egy olyan C programot, amely megtöri az első feladatban előállított titkos szövegeket!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: https://github.com/Drcsonka/Prog1/blob/master/exor_toro_c.c               
        </para>
        <para>
            Ez a program az előbb létrehozott titkosítóra épül. A titkosított fájl-t összeveti a kulcsal és így visszakapjuk az eredeti szöveget.
        </para>            
    </section>        
    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
        <para>
            R
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Koyw6IH5ScQ">https://youtu.be/Koyw6IH5ScQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R</link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
    <section>
        <title>Hiba-visszaterjesztéses perceptron</title>
        <para>
            C++
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:     https://github.com/Drcsonka/Prog1/blob/master/main.cpp           
        </para>
        <para>
            A Mandelbrot feladatból kapott képet használjuk fel bemenetként. Ezt a 'png::'-vel kezdődő sorban állítjuk be, és majd az első parancssori argumentumban adjuk meg. A 'get_width' és a 'get_height' szorzatából kapjuk meg a képünk méretét amit el is fogunk tárolni. A 'Perceptron *p' változóban létrehozunk egy új perceptront aminek 4 paramétert kell megadnunk. Az első a rétegek száma (3) , a második a 'size' vagyis az első rétegre annyi neutront akarunk (size) , a harmadik 256, vagyis a második réteg neuronjai (256), a negyedik az eredmény (1).
        </para>            
         <para>
            Két egymásba ágyazott 'for' ciklussal végigmegyünk a kép szélességén és magasságán. Eközben az 'image' változóban tárolódik a kép vörös színkomponensei.
            A Perceptronunkat meghívjuk az 'image'-re és megadjuk a 'value'értékét, ezzel egyben a perceptronba is tárolásra kerül a vörös színkomponens. A 'value' egy double típusu változó, amit kiírunk.
            A 'delete()' fügvénnyel felszabadítjuk a Perceptronunk által foglalt memóriát.
         </para>
    </section>        
        

</chapter>                
