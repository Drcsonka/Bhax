<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Calvin!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>MNIST</title>
        <para>Az alap feladat megoldása, +saját kézzel rajzolt képet is ismerjen fel,</para>
        <para>https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol Háttérként ezt
            vetítsük le:</para>
        <para>https://prezi.com/0u8ncvvoabcr/no-programming-programming/</para>
        
        
        <para><programlisting>
            <![CDATA[ 
    from __future__ import absolute_import
    from __future__ import division
    from __future__ import print_function

    import argparse

    # Import data
    from tensorflow.examples.tutorials.mnist import input_data

    import tensorflow as tf
    old_v = tf.logging.get_verbosity()
    tf.logging.set_verbosity(tf.logging.ERROR)

    import matplotlib.pyplot

    FLAGS = None

    def main(_):
        mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)
        # Create the model
        x = tf.placeholder(tf.float32, [None, 784])
        W = tf.Variable(tf.zeros([784, 10]))
        b = tf.Variable(tf.zeros([10]))
        y = tf.matmul(x, W) + b
        
        
        ]]>
        </programlisting>
        </para>
        
        <para>
            
            
            Az mnist adatbázist fogjuk használni a gép betanítására.
            Először is definiáljuk a függvényt ami segítségével beolvassuk majd a képet.
            Az "MNIST" adatbázis meghívása után inicializáljuk a Tensorflow könyvtárat.
            "X" egy placeholder lesz aminek alapból nincs meghatározva az értéke, majd egy tenzor
            fogja beleküldeni az értékeket, hogy kapjon egy 784 pixeles képet 
            A "W" a súly a "b" pedig a bias lesz.  A bias arra kell hogy az 
            adatok a legjobban passzoljanak.Az "y" egy "tf.matmul()" 
            függvény ami összeszorozza az x-et és a W majd hozzáadja a b-t.
        
        </para>
        
        <para>
            
        <programlisting>
            <![CDATA[ 
    y_ = tf.placeholder(tf.float32, [None, 10])
    cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits( ←-
        labels = y_, logits = y))
    train_step = tf.train.GradientDescentOptimizer(0.5).minimize( ←-
        cross_entropy)
        ]]>
</programlisting>
        </para>
        
        <para>A "cross_entropy" függvény az eredeti és a becsült közötti különbséget fogja megadni.
            A tanulás lépésekben fog történni. Ehhez a "GradientDescentOptimizer" nevű függvényt használjuk.
            Egy kezdeti értéket fog frissíteni addig, ameddig a "cost" függvény nem éri el a minimumot.
        
        
        </para>
        
        <para>
        <programlisting>   
            <![CDATA[
            sess = tf.InteractiveSession()
            
    # Train
    tf.initialize_all_variables().run(session=sess)
    print("-- A halozat tanitasa")
    for i in range(1000):
    batch_xs, batch_ys = mnist.train.next_batch(100)
    sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})
    if i % 100 == 0:
    print(i/10, "%")
    print("----------------------------------------------------------")
    
     ]]>  
    </programlisting>
        </para>
        
        
        <para>Az alábbi programrészben elindítjuk a folyamatot, az adatot feldaraboljuk. Az adat
            pontosságát kiíratjuk a standard kimenetre.
            <programlisting>
                <![CDATA[
                
                # Test trained model
    print("-- A halozat tesztelese")
    correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
    print("-- Pontossag: ", sess.run(accuracy, feed_dict={x: mnist.test. ←-
    images,
                                                            y_: mnist.test.labels}))
    print("----------------------------------------------------------")
    print("-- A MNIST 42. tesztkepenek felismerese, mutatom a szamot, a ←-
        tovabblepeshez csukd be az ablakat")
    img = mnist.test.images[42]
    image = img

    matplotlib.pyplot.imshow(image.reshape(28, 28), cmap=matplotlib.pyplot.cm ←-
        .binary)
    matplotlib.pyplot.savefig("4.png")
    matplotlib.pyplot.show()

    classification = sess.run(tf.argmax(y, 1), feed_dict={x: [image]})

    print("-- Ezt a halozat ennek ismeri fel: ", classification[0])
    print("----------------------------------------------------------")
    
    print("-- A MNIST 11. tesztkepenek felismerese, mutatom a szamot, a ←-
        tovabblepeshez csukd be az ablakat")

    img = mnist.test.images[11]
    image = img
    matplotlib.pyplot.imshow(image.reshape(28,28), cmap=matplotlib.pyplot.cm. ←-
        binary)
    matplotlib.pyplot.savefig("8.png")
    matplotlib.pyplot.show()

    classification = sess.run(tf.argmax(y, 1), feed_dict={x: [image]})

    print("-- Ezt a halozat ennek ismeri fel: ", classification[0])
    print("----------------------------------------------------------")

    if __name__ == ’__main__’:
        parser = argparse.ArgumentParser()
        parser.add_argument(’--data_dir’, type=str, default=’/tmp/tensorflow/ ←-
            mnist/input_data’,
                             help=’Directory for storing input data’)
        FLAGS = parser.parse_args()
        tf.app.run()
        ]]> 
        </programlisting>
        </para>
        <para>Kézzel rajzolt 5-ös felismerése:</para>
        <para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="images/MNIST.png" scale="70"/>
            </imageobject>
        </mediaobject>
        </para>
    </section>
    
    <section>
        <title>CIFAR-10</title>
        <para>
            Az alap feladat megoldása, +saját fotót is ismerjen fel,
            https://progpater.blog.hu/2016/12/10/hello_samu_a_cifar-10_tf_tutorial_peldabol
        </para>
        <para>
            
            A programunk hasonlítani fog az előző feladatunkhoz, mivel itt is felismerés lesz a lényeg
            csak itt nem számokat, hanem tárgyakat és élőlényeket fogunk felismerni. Már színeket is
            fogunk használni RGB kód segítségével és 32x32 pixeles felbontású képeket is fel tudunk majd ismerni
            jobb esetben...
            Mivel hasonlít a MNIST-es feladatunkhoz így ugyan úgy be kell majd tanítanunk 
            
            <programlisting>
                <![CDATA[
(train_X,train_Y), (test_X,test_Y) = cifar10.load_data()
]]>
            </programlisting>   
        </para>
            <para>
                
                Mivel itt már a képek színesek lesznek így nem lesz elég 1 colour-chanel
                hanem 3-ra lesz szükség az RGB miatt. Az 1 colour-chanel a grayscale volt a MNIST-be
                a 3 RGB-ben a Red, Green, Blue lesz. Ezt így fogja majd eltárolni:
            </para>
        <para>
        <programlisting >
                <![CDATA[
    train_X = train_X.reshape(-1,32,32,3)
    test_X = test_X.reshape(-1, 32,32, 3)
    ]]>

        </programlisting> 
        </para>
        <para>
            Ez a 10 dolog, az amit az adatbázisunk alapjáraton tartalmaz
        </para>
        <para>
                <programlisting>
       <![CDATA[
             
    cifar_classes = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']
                
                ]]>
                </programlisting>
        </para>
        <para>
            Ebből én egy repülőt próbáltam felismertetni:
            
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/cifar.png" scale="70"/>
                </imageobject>
            </mediaobject>
        </para>
        
        
    </section>                     


</chapter>   
