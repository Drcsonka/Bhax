<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Reverse engineering UML osztálydiagram</title>
        <para>
	UML osztálydiagram rajzolása az első védési C++ programhoz. Az osztálydiagramot a forrásokból
generáljuk (pl. Argo UML, Umbrello, Eclipse UML) Mutassunk rá a kompozíció és aggregáció
kapcsolatára a forráskódban és a diagramon, lásd még: https://youtu.be/Td_nlERlEOs.
https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_6.pdf (28-32 fólia)
        </para>
        <para>----</para>
	<para> Az UML (Unified Modelling Language) egy szabványosított modellező nyelv.Az UML egy
            gyakorlati, objektumoritentált modellező megoldás. Főleg arra használjuk, hogy olyan
            diagrammokat készítésünk, amik egy rendszer tervezésétábrázolják jobban látható módon,
            szoftverekről és programkódokról is. Az UML osztálydiagrammunk elkészítéséhez a Visual
            Paradigm programot fogjuk használni. A programkódunkat automatikusan URl
            osztálydiagramma tudjuk változtatni a Tools/Code/Instant Reverse-re kattintva. Ezután
            felugrik egy ablak majd meg kell adjuk a forráskód nyelvét, és az elérési útvonalát,
            majd kiválasztjuk az osztályokat.</para>
        <para>Ebből a forráskódból fogjuk majd csinálni a diagrammunkat:</para>
        <para>
            <programlisting>
    <![CDATA[
                
#include <iostream>		
#include <cmath>		
#include <fstream>		


class LZWBinFa
{
public:
    
    LZWBinFa ():fa (&gyoker)
    {
    }
    ~LZWBinFa ()
    {
        szabadit (gyoker.egyesGyermek ());
        szabadit (gyoker.nullasGyermek ());
    }

    
    void operator<< (char b)
    {
        
        if (b == '0')
        {
            
            if (!fa->nullasGyermek ())	
            {
                
                Csomopont *uj = new Csomopont ('0');
                
                fa->ujNullasGyermek (uj);
                
                fa = &gyoker;
            }
            else			
            {
                
                fa = fa->nullasGyermek ();
            }
        }
        
        else
        {
            if (!fa->egyesGyermek ())
            {
                Csomopont *uj = new Csomopont ('1');
                fa->ujEgyesGyermek (uj);
                fa = &gyoker;
            }
            else
            {
                fa = fa->egyesGyermek ();
            }
        }
    }
    
    void kiir (void)
    {
        
        melyseg = 0;
        
        kiir (&gyoker, std::cout);
    }
    
    int getMelyseg (void);
    double getAtlag (void);
    double getSzoras (void);

   
    friend std::ostream & operator<< (std::ostream & os, LZWBinFa & bf)
    {
        bf.kiir (os);
        return os;
    }
    void kiir (std::ostream & os)
    {
        melyseg = 0;
        kiir (&gyoker, os);
    }

private:
    class Csomopont
    {
    public:
        
        Csomopont (char b = '/'):betu (b), balNulla (0), jobbEgy (0)
        {
        };
        ~Csomopont ()
        {
        };
        
        Csomopont *nullasGyermek () const
        {
            return balNulla;
        }
        
        Csomopont *egyesGyermek () const
        {
            return jobbEgy;
        }
        
        void ujNullasGyermek (Csomopont * gy)
        {
            balNulla = gy;
        }
        
        void ujEgyesGyermek (Csomopont * gy)
        {
            jobbEgy = gy;
        }
        
        char getBetu () const
        {
            return betu;
        }

    private:
       
        char betu;
        
        Csomopont *balNulla;
        Csomopont *jobbEgy;
        
        Csomopont (const Csomopont &); 
        Csomopont & operator= (const Csomopont &);
    };

    
    Csomopont *fa;
    
    int melyseg, atlagosszeg, atlagdb;
    double szorasosszeg;
    
    LZWBinFa (const LZWBinFa &);
    LZWBinFa & operator= (const LZWBinFa &);

    
    void kiir (Csomopont * elem, std::ostream & os)
    {
        
        if (elem != NULL)
        {
            ++melyseg;
            kiir (elem->egyesGyermek (), os);
            
            for (int i = 0; i < melyseg; ++i)
                os << "---";
            os << elem->getBetu () << "(" << melyseg - 1 << ")" << std::endl;
            kiir (elem->nullasGyermek (), os);
            --melyseg;
        }
    }
    void szabadit (Csomopont * elem)
    {
        
        if (elem != NULL)
        {
            szabadit (elem->egyesGyermek ());
            szabadit (elem->nullasGyermek ());
            
            delete elem;
        }
    }

protected:			
    Csomopont gyoker;
    int maxMelyseg;
    double atlag, szoras;

    void rmelyseg (Csomopont * elem);
    void ratlag (Csomopont * elem);
    void rszoras (Csomopont * elem);

};


int
LZWBinFa::getMelyseg (void)
{
    melyseg = maxMelyseg = 0;
    rmelyseg (&gyoker);
    return maxMelyseg - 1;
}

double
LZWBinFa::getAtlag (void)
{
    melyseg = atlagosszeg = atlagdb = 0;
    ratlag (&gyoker);
    atlag = ((double) atlagosszeg) / atlagdb;
    return atlag;
}

double
LZWBinFa::getSzoras (void)
{
    atlag = getAtlag ();
    szorasosszeg = 0.0;
    melyseg = atlagdb = 0;

    rszoras (&gyoker);

    if (atlagdb - 1 > 0)
        szoras = std::sqrt (szorasosszeg / (atlagdb - 1));
    else
        szoras = std::sqrt (szorasosszeg);

    return szoras;
}

void
LZWBinFa::rmelyseg (Csomopont * elem)
{
    if (elem != NULL)
    {
        ++melyseg;
        if (melyseg > maxMelyseg)
            maxMelyseg = melyseg;
        rmelyseg (elem->egyesGyermek ());
        
        rmelyseg (elem->nullasGyermek ());
        --melyseg;
    }
}

void
LZWBinFa::ratlag (Csomopont * elem)
{
    if (elem != NULL)
    {
        ++melyseg;
        ratlag (elem->egyesGyermek ());
        ratlag (elem->nullasGyermek ());
        --melyseg;
        if (elem->egyesGyermek () == NULL && elem->nullasGyermek () == NULL)
        {
            ++atlagdb;
            atlagosszeg += melyseg;
        }
    }
}

void
LZWBinFa::rszoras (Csomopont * elem)
{
    if (elem != NULL)
    {
        ++melyseg;
        rszoras (elem->egyesGyermek ());
        rszoras (elem->nullasGyermek ());
        --melyseg;
        if (elem->egyesGyermek () == NULL && elem->nullasGyermek () == NULL)
        {
            ++atlagdb;
            szorasosszeg += ((melyseg - atlag) * (melyseg - atlag));
        }
    }
}


void
usage (void)
{
    std::cout << "Usage: szovegfa.fa in_file -o out_file" << std::endl;
}

int
main (int argc, char *argv[])
{
    
    if (argc != 4)
    {
        
        usage ();
        
        return -1;
    }

    
    char *inFile = *++argv;

    
    if (*((*++argv) + 1) != 'o')
    {
        usage ();
        return -2;
    }

   

    
    std::fstream beFile (inFile, std::ios_base::in);

    
    if (!beFile)
    {
        std::cout << inFile << " nem letezik..." << std::endl;
        usage ();
        return -3;
    }

    std::fstream kiFile (*++argv, std::ios_base::out);

    unsigned char b;		
    LZWBinFa binFa;		

    
    while (beFile.read ((char *) &b, sizeof (unsigned char)))
        if (b == 0x0a)
            break;

    bool kommentben = false;

    while (beFile.read ((char *) &b, sizeof (unsigned char)))
    {

        if (b == 0x3e)
        {			// > karakter
            kommentben = true;
            continue;
        }

        if (b == 0x0a)
        {			// újsor
            kommentben = false;
            continue;
        }

        if (kommentben)
            continue;

        if (b == 0x4e)		
            continue;

         for (int i = 0; i < 8; ++i)
        {
            
            if (b & 0x80)
                
                binFa << '1';
            else
                
                binFa << '0';
            b <<= 1;
        }

    }

    
    kiFile << binFa;
    kiFile << "depth = " << binFa.getMelyseg () << std::endl;
    kiFile << "mean = " << binFa.getAtlag () << std::endl;
    kiFile << "var = " << binFa.getSzoras () << std::endl;

    kiFile.close ();
    beFile.close ();

    return 0;
}


    ]]>
</programlisting>
        </para>
        
        <para>
            Ez a diagramm:
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/binfaReverse.png" scale="70" />
                </imageobject>
            </mediaobject>
        </para>
        
    </section>        

    <section>
        <title>Forward engineering UML osztálydiagram</title>
        <para>
            UML-ben tervezzünk osztályokat és generáljunk belőle forrást!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Az előző feladatohoz hasonlóan az UML osztálydiagrammokkal kell foglalkoznunk, és itt is a Visual Paradigm programot fogjuk használni. Itt viszont most az fog változni,előzőhöz képest, hogy megfordítjuk a menetet, és most az UML diagrammból fogunk kódot csinálni.
 Létrehozunk egy uj classt.
Itt tudunk majd forrást generalni ezt legegyszerűbben az előzőhöz hasonlóan a Code
Generation Wizard-al tudjuk itt ki kell valasztanunk a helyet, hogy hova mentsen és azt, hogy milyen nyelven akarjuk a kódot
Ha C++-t választottunk 2 fajlt fogunk kapni egy headert(.h) es egy forrás (.cpp)fajlt .
        
        </para>
        
        <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/umlforward.png" scale="70" />
                </imageobject>
            </mediaobject>
        </para>
    </section> 

<section>
        <title>BPMN</title>
        <para>
	Rajzoljunk le egy tevékenységet BPMN-ben!
https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_7.pdf (34-47 fólia)
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            A BPMN vagyis "Business Process Model and Notation " ami egy álltalában üzleti folyamatok és modellek ábrázolására használt grafiukus ábrázolás.
Az én általam csinált ilyen ábra, az éhséggel fog foglalkozni. Először is jön, hogy éhesek vagyunk, ha nem teljesül nem történik semmi, ha viszont igen akkor továbblépünk, arra , hogy valami élelmiszert kell szereznünk, erre van több megoldásunk is, vagy elmenni valamilyen ételt felszolgáló helyre vagy bevárásrolni alapanyagokat. Ha azt választjuk, hogy elmegyunk enni, akkor megvesszük, elfogyasztjuk és már meg is vagyunk. Ha viszont van betudunk vásárolni is, akkor bevásárolunk, előkészítjük az ételt, majd megesszük. Ez után az éhségünk is el fog múlni.
        </para>
<para>
<mediaobject>
                <imageobject>
                    <imagedata fileref="images/BPMN.png" scale="50" align="center"></imagedata>
                </imageobject>
            </mediaobject>
</para>
<para>
Ezt a ábrát a draw.io segítségével készítettem, amivel nagyon egyszerű hasonló diagramot csinálni.
</para>

    </section> 

</chapter>                
