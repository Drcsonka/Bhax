<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Arroway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>OO szemlélet</title>
        <para>
	A módosított polártranszformációs normális generátor beprogramozása Java nyelven. Mutassunk rá,
hogy a mi természetes saját megoldásunk (az algoritmus egyszerre két normálist állít elő, kell egy
példánytag, amely a nem visszaadottat tárolja és egy logikai tag, hogy van-e tárolt vagy futtatni kell
az algot.) és az OpenJDK, Oracle JDK-ban a Sun által adott OO szervezés ua.!
        </para>
	<para>
	    Megoldás forrása Javában:  https://github.com/Drcsonka/Prog2/blob/master/polargenerator.java
	</para>
        <para>
            Megoldás forrása C++-ban:  https://github.com/Drcsonka/Prog2/blob/master/polargen.cpp              
        </para>
        <para>
            Ezzel a programmal már foglalkoztunk Prog1-en.
        </para>
        
        <para>
            <programlisting language="JAVA">
                
                <![CDATA[
public class polargenerator
{
    boolean nemTarolt = true;
    double tarolt;
    public polargenerator() 
    {
        nemTarolt = true;
    }
    public double kovetkezo()
    {
        if(nemTarolt)
        {
            double u1, u2, v1, v2, w;
            do
            {
                u1 = Math.random();
                u2 = Math.random();
                v1 = 2 * u1 - 1;
                v2 = 2 * u2 - 1;
                w = v1 * v1 + v2 * v2;
            } while(w > 1);
            double r = Math.sqrt((-2 * Math.log(w)) / w);
            tarolt = r * v2;
            nemTarolt = !nemTarolt;
            return r * v1;
        }
        else 
        {
            nemTarolt = !nemTarolt;
            return tarolt;
        }
    }
    public static void main(String[] args)
    {
        polargenerator g = new polargenerator();
        for (int i = 0; i < 10; ++i)
        {
            System.out.println(g.kovetkezo());
        }
    }
}   
        ]]>
            </programlisting>
        </para>
	<para>
	A programunk két változót fog előállítani, az első fogja tárolni az értékünkket egy 'tarolt' nevu double változóban. A másik egy boolean típusú változó lesz amit azt fogja tárolni, hogy van-e számunk eltárolva vagy sem.

</para>
        <para>
        <programlisting>
            
            <![CDATA[
            boolean nemTarolt = true;
            double tarolt;
        ]]>
        
        </programlisting>
        </para>
            <para>
	A program eleje egy 'if' elagazás aminek az 'igaz' része fog lefutni, mivel a második változónk vagyis 'nemTarolt' 'true'. Ez álltal, lefut a benne lévő do while ciklus ami generálni fog egy 1-nél nagyobb számot, majd eltároljuk ezt a 'tarolt' valtozóba, és a 'nemTarolt' változót hamis-á tesszük. 
	Majd következő futtatásra, az 'if' ciklusunk 'hamis' része fog lefutni, ami kiíratja a letárolt számot, és a 'nemTarolt' logikai változót negatívvá változtatjuk, hogy legközelebb, amikor újra lefuttatjuk a programot, újra 2 számot kapjunk.
</para>
        <para>
            <programlisting>
                <![CDATA[
                if(nemTarolt)
        {
            double u1, u2, v1, v2, w;
            do
            {
                u1 = Math.random();
                u2 = Math.random();
                v1 = 2 * u1 - 1;
                v2 = 2 * u2 - 1;
                w = v1 * v1 + v2 * v2;
            } while(w > 1);
            double r = Math.sqrt((-2 * Math.log(w)) / w);
            tarolt = r * v2;
            nincsTarolt = !nincsTarolt;
            return r * v1;
        }
        else 
        {
            nincsTarolt = !nincsTarolt;
            return tarolt;
        }
               ]]> 
            </programlisting>
        </para>
        <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/polargenerator.png" scale="60" />
                </imageobject>
            </mediaobject>
        </para>
    </section>        
<section>
        <title>„Gagyi”</title>
        <para>
            Az ismert formális2 tesztkérdéstípusra adj a szokásosnál
(miszerint x, t az egyik esetben az objektum által hordozott érték, a másikban meg az objektum
referenciája) „mélyebb” választ, írj Java példaprogramot mely egyszer végtelen ciklus, más x, t
értékekkel meg nem! A példát építsd a JDK Integer.java forrására3
, hogy a 128-nál inkluzív objektum
példányokat poolozza!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:https://github.com/Drcsonka/Prog2/blob/master/gagyi.java           
        </para>
        <para>
            <programlisting>
                <![CDATA[
                public class gagyi{

public static void main(String[] args) {
	
	Integer x = -128;
	Integer t = -128;
	while (x <= t && x >= t && t != x)
		{ System.out.println("Gagyi");  }
	System.out.println("Gagyi vége"); 
}
}
        ]]> 

            </programlisting>
        </para>
        <para> A lábjegyzetben talált segédlet alapján jobban megértve a feladatot és kipróbálva a
            próbafeladatokat a '-129' használatával mindkettő változónál végtelen ciklusba
            torkollunk. Miközben a '-128' használatával nincs végtelen ciklus A feladat megoldásához
            a fentebb említett, JDK Integer.java forrását kell megvizsgálnunk! 
        </para>
        <para>A '-128' még az előző forrásban talált intervallumon belül található, így ugyan abból
            a poolból kapnak majd Integer és mivel ugyan az az értékük így ugyanazt az objektumot
            kapják, ezért a címük is meg fog eggyezni, így nem teljesül a feltétel és nem kerül
            végtelen ciklusba. A '-129'-es példánál viszont, más a helyzet mivel a '-129' már másik
            intervallumbanvan, így a különböző Integer objektum jön létre, más címekkel és így a
            feltétel teljesülése miatt, végtelen ciklusunk lesz... 
        </para>
    <para> 
        Itt egy példa a véges-re, amikor nem ütközünk végtelen ciklusba:
        <mediaobject>
            <imageobject>
                <imagedata fileref="images/gagyiveges.png" scale="60" />
            </imageobject>
        </mediaobject>
    </para>
    <para>
        
        Ez pedig egy példa a végtelen ciklusra:
        <mediaobject>
            <imageobject>
                <imagedata fileref="images/gagyivegtelen.png" scale="60" />
            </imageobject>
        </mediaobject>
    </para>
    </section> 

	<section>
        <title>Yoda</title>
        <para>
            Írjunk olyan Java programot, ami java.lang.NullPointerEx-el leáll, ha nem követjük a Yoda
conditions-t! https://en.wikipedia.org/wiki/Yoda_conditions
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: https://github.com/Drcsonka/Prog2/blob/master/yoda.java               
        </para>
        <para>
            <programlisting>
                <![CDATA[
                public class yoda 
    {
	public static void main(String[] args)ű
	{
	String s=null;
	if ("yoda".equals(s))  
	   //(s.equals("yoda")) 
		{
	
		System.out.println("Yoda");
	
	
	   }
	   }
    }
    ]]>
            </programlisting>
        </para>
        <para>
   A Yoda condition nevét a Starwars karakterről kapta, aki a mondat második felét mondta először és utánna az elsőt, ezzel felcserélve a kettőt.
            A Yoda condition lényege a programozásban, hogy egy ekvivalenciánál a megszokottól eltérően a konstanst nem a jobb oldalon helyezkedik el, hanem a bal oldalon.
            Ezt legfőkébb Stringeknél szokták alkalmaazni. Szóval nem az objektumunkat hasonlítjuk össze a stringgel, hanem a stringet az objektumunkkal.
            A módszer előnye, hogy elkerüljük a NullPointerExceptions-t, de a hátránya azonban az, hogy a kód olvasása nehezebb lesz mivel ilyenkor jobbról balra olvassuk a feltételeket.
        

        </para>
	    <para> 
	        Az első futtatásra a programunk hiba nélkül lefutott, de viszont nem írt ki semmit ekkor a "("yoda".equals(s))"-t használtuk.
	        Második futtatásra a "(s.equals("yoda"))"-t használva NullPinterException erroral találkozunk.
         <mediaobject>
                <imageobject>
                    <imagedata fileref="images/yoda.png" scale="70" />
                </imageobject>
            </mediaobject>
        </para>
	    
    </section> 

	<section>
        <title>Kódolás from scratch</title>
        <para>
            Induljunk ki ebből a tudományos közleményből: http://crd-legacy.lbl.gov/~dhbailey/dhbpapers/bbpalg.pdf és csak ezt tanulmányozva írjuk meg Java nyelven a BBP algoritmus megvalósítását!
Ha megakadsz, de csak végső esetben: https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitokjavat/apbs02.html#pi_jegyei (mert ha csak lemásolod, akkor pont az a fejlesztői élmény marad ki,
melyet szeretném, ha átélnél).
        </para>
        <para>
            Megoldás forrása:                
        </para>
	    
	    <para>
	        <programlisting>
	            <![CDATA[
	    public class PiBBP 
	    {
	    
	    String d16PiHexaBetuk;
	    public PiBBP(int d) 
	    {
	    
	    double d16Pi = 0.0d;
	    
	    double d16S1t = d16Sj(d, 1);
	    double d16S4t = d16Sj(d, 4);
	    double d16S5t = d16Sj(d, 5);
	    double d16S6t = d16Sj(d, 6);
	    
	    d16Pi = 4.0d*d16S1t - 2.0d*d16S4t - d16S5t - d16S6t;
	    
	    d16Pi = d16Pi - StrictMath.floor(d16Pi);
	    
	    StringBuffer sb = new StringBuffer();
	    
	    Character hexaBetuk[] = {'A',
	    'B',
	    'C',
	    'D',
	    'E',
	    'F'};
	    
	    while(d16Pi != 0.0d) {
	    
	    int jegy = (int)StrictMath.floor(16.0d*d16Pi);
	    
	    if(jegy<10)
	        sb.append(jegy);
	        else
	        sb.append(hexaBetuk[jegy-10]);
	        
	        d16Pi = (16.0d*d16Pi) - StrictMath.floor(16.0d*d16Pi);
	        }
	        
	        d16PiHexaBetuk = sb.toString();
	        
	        }
	        
	        public double d16Sj(int d, int j) 
	        { 
	        
	        double d16Sj = 0.0d;
	        
	        for(int k=0; k<=d; ++k)
	        d16Sj += (double)n16modk(d-k, 8*k + j) / (double)(8*k + j);
	        
	        return d16Sj - StrictMath.floor(d16Sj);
	        }
	        public long n16modk(int n, int k) 
	        { 
	        
	        int t = 1;
	        while(t <= n)
	        t *= 2;
	        
	        long r = 1;
	        
	        while(true) 
	        {
	        
	        if(n >= t) 
	        {
	        r = (16*r) % k;
	        n = n - t;
	        }
	        
	        t = t/2;
	        
	        if(t < 1)
	        break;
	        
	        r = (r*r) % k;
	        
	        }
	        
	        return r;
	        }
	        
	        public String toString() 
	        {
	        
	        return d16PiHexaBetuk;
	        }
	        
	        public static void main(String args[]) 
	        {        
	        System.out.print(new PiBBP(24015)); 
	        }
	        }
	        ]]>
	        </programlisting>
	    
	    </para>
	    
        <para> Az algoritmus segítégével a Pi számjegyeit nem csak egy tizedestől kezdve, hanem egy
            tetszőleges kezdőponttól is ki tudjuk számolni, így az előtte lévő számjegyeket nemkell
            kiszámítanunk. A konstruktorunknak van egy paramétere ami a 'd' lesz. Ezt követően
            létrehozzuk a változókat. Kezdetben a "d16Pi"-t aminek kezdőértéke a "0.0d"-vel lesz,
            ezzel jelölve, hogy double értékű lesz. Az S1,S4,S5,S6-al számoljuk az értékét. A
            kiszámított értékből kivonjuk a lefelé kerekített értékét a d16Pi-nek ezzel elérve, hogy
            0 és 1 közé essen d16Pi értéke. Majd létrehozunk egy while ciklust, ami addig meg fog
            dolgozni még a d16Pi értéke 0 nem lesz, majd lekerekítjük és eltároljuk ezt a jegybe. Ha
            a jegy 10-nél kisebb nem kell vele semmit csinálnunk. De mivel a 16-os számrendszerben a
            9-nél nagyobb számok már betűkként szerepelnek (A-F) így ha 9-nél nagyobb, akkor a
            visszaadott értéket a hexajegyekből választjuk. Ezt úgy valósítjuk meg, hogy ha például
            12-őt kapunk akkor abból kivonva 10-et kapjuk a 2-őt és 2-es indexű elemet a tömbben
            használjuk. </para>
        <para>
            <mediaobject>
            <imageobject>
                <imagedata fileref="images/PiBBP2.png" scale="70" />
            </imageobject>
            </mediaobject>
        </para>
    </section> 





</chapter>                
