<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, !</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>FUTURE tevékenység editor</title>
        <para>Javítsunk valamit a ActivityEditor.java JavaFX programon!
            https://github.com/nbatfai/future/tree/master/cs/F6
            Itt láthatjuk működésben az alapot: https://www.twitch.tv/videos/222879467</para>
        <para>A programmal való ismerkedés közben az első bug amivel találtkoztam az az volt, hogy
            amikor új Altevékenységet hozunk létre nemtudunk mégegyet létrehozni mivel már 1 "Új
            altevékenység" nevú mappa létezik és 2 ugyan olyan nevű mappa nem létezhet. Erre azt
            találtam ki, hogy ha az újonnan létrehozott altevékenységek után szúrok egy sorszámot
            akkor ugymond a végtelenségig lehetne létrehozni altevékenységeket. Ezt úgy oldottam
            meg, hogy létrehoztam egy új változót ami ebben az esetben a "sorszam" és az új 
            altevékenység után szurtam, minden egyes beszúrás után növelve az értékét.
            
            <programlisting language="java">
                <![CDATA[
               int sorszam = 1;
                while (true) {
                    java.io.File f = new java.io.File(
                            file.getPath() + System.getProperty("file.separator") + "Új altevékenység" + sorszam); 
                    if (f.mkdir()) {
                        javafx.scene.control.TreeItem<java.io.File> newAct
                         = new FileTreeItem(f, new javafx.scene.image.ImageView(actIcon));
                        getTreeItem().getChildren().add(newAct);
                        break;
                    } else {
                        sorszam++;
                        System.err.println("Cannot create " + f.getPath());

                    }
                }
            });
]]>
            </programlisting>
        </para>
        
        
        <para>
            <programlisting language="java"><![CDATA[
                private int a = 1;
        public TextFieldTreeCell(javafx.scene.control.TextArea propsEdit) {
            this.propsEdit = propsEdit;
            javafx.scene.control.MenuItem subaMenuItem = new javafx.scene.control.MenuItem("Új altevékenység");//"New subactivity");
            addMenu.getItems().add(subaMenuItem);
            subaMenuItem.setOnAction((javafx.event.ActionEvent evt) -> {
                java.io.File file = getTreeItem().getValue();
                java.io.File f = new java.io.File(file.getPath() + System.getProperty("file.separator") + "Új altevékenység");
                

                if (f.mkdir()) {
                      javafx.scene.control.TreeItem<java.io.File> newAct
                           = new FileTreeItem(f, new javafx.scene.image.ImageView(actIcon));                            
                   getTreeItem().getChildren().add(newAct);
                } else {
                     javafx.scene.control.TreeItem<java.io.File> newAct
                           = new FileTreeItem(f = new java.io.File(file.getPath() + System.getProperty("file.separator") + "Új altevékenység"+" "+ a), new javafx.scene.image.ImageView(actIcon));                            
                   getTreeItem().getChildren().add(newAct);
                   a++;
               }
  
            });
]]>
            </programlisting>
            
        </para>
        
    </section>

    <section>
        <title>OOCWC Boost ASIO hálózatkezelése</title>
        <para>Mutassunk rá a scanf szerepére és használatára! https://github.com/nbatfai/robocar-
            emulator/blob/master/justine/rcemu/src/carlexer.ll</para>
        
        
        <para> 
            A "scanf()" funkció egy bemeneti folyamot figyeli és keres benne meghatározott formátumokat.
            A feladatban a "sscanf()"-et használjuk ami stringeből fog beolvasni.
            A program elején megadjuk, hogy miket keresünk majd és ezeknek a jelentését:
        </para>
        <para>
            <programlisting>
                <![CDATA[
INIT	"<init"
INITG	"<init guided"
WS	[ \t]*
WORD	[^-:\n \t()]{2,}
INT	[0123456789]+
FLOAT	[-.0123456789]+
ROUTE	"<route"
CAR	"<car"
POS	"<pos"
GANGSTERS	"<gangsters"
STAT	"<stat"
DISP	"<disp>"
]]>
            </programlisting>
        </para>
        <para>
            
            
            
            
            A scanf függvény képes bejövő stringek beolvasására, és ezek eltárolására a megadott változókba. Visszatérési
            értéke a sikeresen beolvasott változók száma. </para>
        
        
       
        <programlisting language="c++">
            <![CDATA[ 
        {POS}{WS}{INT}{WS}{INT}{WS}{INT}	{
					                         std::sscanf(yytext, "<pos %d %u %u", &m_id, &from, &to);
					                         m_cmd = 10001;
					                        }
]]>
        </programlisting>
        
        <para>
            
            Mint itt látjuk a "yytext"-et scanneljuk, és előtte hogy miket keresünk benne.
        </para>
        
    </section>

    <section>
        <title>BrainB</title>
        <para>Mutassuk be a Qt slot-signal mechanizmust ebben a projektben:
            https://github.com/nbatfai/esport- talent-search</para>
        <para>Ezzel a feladattal már foglalkoztunk korábban, a lényege, hogy van egy karakterünk (Samu)
            akit az egér segítségével követnünk kell de folyamatosan jelennek meg "New Entity"-k 
            amik nehezítik Samu megtalálását és követését ezzel a feladatunkat is majd az alapján
            hogy mennyire vagyunk pontosak 10 perc alatt a program majd csinál belőle egy statisztikát.
        </para>
        <para>A most feladatunk az, hogy mutassuk be a Slot-signalt Qt-ban. A slot-signal mechanizmus
            úgy működik, hogy objektumokat kapcsol össze. Először is a kapcsolni tervezett részt emit-eljük
            például így:
        </para>
        <para>
            <programlisting language="java">
            <![CDATA[
        }
        emit endAndStats ( endTime );
        }
                 ]]>
     </programlisting>
        </para>
        <para>
            Így, majd megtudjuk máshol hívni/összekapcsolni.
            Ha valamivel össze akarjuk kapcsolni, akkor szükségünk lesz egy "connect"-re
            amik így fognak kinézni a feladatunkba:
            
            <programlisting language="java">
            <![CDATA[
     connect ( brainBThread, SIGNAL ( heroesChanged ( QImage, int, int ) ),
    this, SLOT ( updateHeroes ( QImage, int, int ) ) );
    connect ( brainBThread, SIGNAL ( endAndStats ( int ) ),
    this, SLOT ( endAndStats ( int ) ) );
                 ]]>
     </programlisting>
            
            Látjuk is hogy az "endAndStat" ott szerepel amit az előbb emiteltünk. Mivel azt az 
            objektumot egy hozzá hasonlóval fogjuk összekapcsolni így amikor a connect-eltet meghívjuk
            a SLOT-ba rakott objektum is le fog futni, például maradva a "endAndStat"-os példánál
        </para>
            <para>
                
                <programlisting language="java">
            <![CDATA[
    connect ( brainBThread, SIGNAL ( endAndStats ( int ) ),
    this, SLOT ( endAndStats ( int ) ) );
                 ]]>
     </programlisting>
            </para>
        
        <para>
            Mint itt látjuk a brainBThread-ből vesszük az "endAndStats"-ot és amikor ezt meghívjuk
            a BrainBwin-ben lévő "endAndStats"-unk is le fog vele futni.
        </para>
        <para>

            <programlisting language="java">
            <![CDATA[
        void BrainBThread::run()
        {
            while ( time < endTime ) {
            QThread::msleep ( delay );
            if ( !paused ) {
                ++time;
                devel();
            }
            draw();
        }
        emit endAndStats ( endTime );
        }
                 ]]>
     </programlisting>
            </para>
            <para>
            <programlisting language="java">
            <![CDATA[
        void BrainBWin::endAndStats ( const int &t )
        {
            qDebug() << "\n\n\n";
            qDebug() << "Thank you for using " + appName;
            qDebug() << "The result can be found in the directory " + statDir;
            qDebug() << "\n\n\n";
            
            save ( t );
            close();
        }
                 ]]>
     </programlisting>
            </para>
    </section>
</chapter>
