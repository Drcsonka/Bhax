<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>
        <para>
            Állapotátmenet gráfjával megadva írd meg ezt a gépet!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: https://github.com/Drcsonka/Prog1/blob/master/unaris.cpp               
        </para>
        <para>
            Az Unáris vagyis masneven Egyes szamrendszer, egy olyan szamrendszer amiben egy szamot ugy abrazolunk, hogy annyiszor egymassmelle tesszuk pl.: .... = 4
	    Főleg kis értékek / számok esetén működik jól. Megadunk egy számot a programnak és egy 'for' ciklus segítségével annyiszor egymás mellé írjuk az a karaktert amit megadtunk (pl : .) amennyi a beírt szám értéke
        </para>
    </section>        
        
    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:   https://github.com/Drcsonka/Prog1/blob/master/kornyezetfuggetlen.txt             
        </para>
        <para>
	    Noam Chomsky nevéhez fűződik a generatív grammatika nyelv.
            A Grammatikanak 4 alkotóeleme van a :
            A nemterminális jelek vagy változó szimbólumok, általában nagybetűkkel (A, B, C) jelöljük . 
            A terminális jelek, vagy konstansok, általában kisbetűkkel (a, b, c) jelöljük. 
            A helyettesítési szabályok, elemeit rendezett párok képzik.
            A kitüntetett nemterminális jel, a grammatika kiinduló vagy kezdő eleme.

        </para>
    </section>        
                
    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld 
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
https://github.com/Drcsonka/Prog1/blob/master/c89.c
https://github.com/Drcsonka/Prog1/blob/master/c99.c	
        </para>
        <para>
            A programban egy ciklus található ami 1-10ig megy el.C99-ben le fog futni miközben, c89-ben nem fog, mivel ebben a verzióban még nem lehet változót deklarálni a ciklus fejben.
        </para>
    </section>                     

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat! 
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet, 
            a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk és ne kispályázzunk!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: https://github.com/Drcsonka/Prog1/blob/master/Lexikalis.c
https://github.com/Drcsonka/Prog1/blob/master/Lexikalis.l 
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            A lex program segítségével, nekünk csak szabályokat kell megadnunk, ami alapján használható szabványos programkódot fog előállítani.
        </para>
        <para>
            A programunk 3 részből áll.
        </para>
        <para>
            Az első rész C kódot tartalmaz.
        </para>
        <para>
            A második részben szabályokat definiálunk. A reguláris kifejezésekkel kezdünk. A másik a program által kapott szöveget fogja elemezni. Az 'atof()' függvénnyel fogjuk a 'string'-eket double típúsra átalakítani.
        </para>
        <para>
            A harmadik részben található a 'yylex()' függvény ami a második részben megadott szabályokat hívja meg. Majd kiírajta az eredményt.
        </para>

    </section>                     

    <section>
        <title>l33t.l</title>
        <para>
            Lexelj össze egy l33t ciphert!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  https://github.com/Drcsonka/Prog1/blob/master/leet.l
        </para>
        <para>
            A l33t nyelv lényege, hogy a betűket rájuk hasonlító karakterekkel és számokkal helyetessíti. Ez a program is a lex program használatával fog működni.
	    </para>
	    <para>
	    	Az program első részében a 'L33SIZE' elemet fogjuk definálni. Ez fogja a majd helyettesíteni az kért szöveget. Meg van adva egy 'c' változó amiben az alap karakter van és a '*leet[4]' tömben a 4 változata van amire kicserélhetjük. Ebből a 2 változóból fog összeállni a 'l337d1c7[]' tömbünk.
	    </para>
	    <para>
	    	Majd megvizsgáljuk egyesével a karaktereket egy reguláris kifejezéssel. Meghívjuk egy 'for' ciklusban a 'L33SIZE' konstanst, ide fog majd behelyettesíteni. 
	    </para>
	    <para>
	    	A programunk nem tud mit csinálni az uppercase karakterekkel ezért van a 'tolower' függvényünk ami átfogja ezeket allakítani kisbetűre. Majd generálunk egy random számot 1-100ig, és ez alapján döntjük el, hogy a 4 változat alapján melyikkel helyettesítsük karakterünket.
	    </para>
    </section>                     


    <section>
        <title>A források olvasása</title>
        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért? 
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>
            
        <orderedlist numeration="lowerroman">
            <listitem>                                    
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
    signal(SIGINT, jelkezelo);]]></programlisting>
    		<para>
            	Ez a kód részlet azt jelenti, hogy ha a 'SIGINT' jel kezelése nem volt figyelmen kívül hagyva akkor ezután se legyen.
            </para>
            </listitem>

            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting>  
                <para>
                	Egy 'for' ciklus fog lefutni ami 0-4ig fogja kiírni a számokat egyesével. Mivel a '++i' változót használata előtt növelem, így 5-re növelve már nem fut le mégegyszer, hanem vége lesz a ciklusnak.
                </para>          
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting> 
                <para>
                	Ez a ciklus hasonlít az előzőhöz, annyi különbség van a kettő között, hogy itt az 'i' változót először használjuk és utánna változtatjuk. 
                </para>           
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting>    	 <para>
                	A 'for' ciklus mind eddig is 0tól addig megy még el nem éri az 5-öt. Közbe a 'tomb' i-edik elemébe belerakja az 'i' értékét is. A program le fog futni de, bugos, és nem a vár eredményt kapjuk. 'Splint' lefutattása szerint is hibás.  
                	</para>  
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting>
                <para>
                	A ciklusunknak addig kéne futnia ameddig 'i' el nem éri az 'n' értékét, de emelett van egy másik feltételünk is, hogy a 'd' és az 's' pointer 'egyenlő' nem lesz, miközben növeljük őket. De ez a rész csak egy '='-et tartalmaz ami magában nem megfelelő, így bugos a program.
                </para>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>            
             <para>
             		A programkódnak kiíratja az 'f()' függvény értékét kétszer. A probléma ott lesz, hogy az első meghívásnál megváltoztatjuk 'a'-nak az értékét amit majd a másodikban felhasználunk újra. Mivel a kiírtékelési sorrend nincs előre megadva így bugos lesz.
             </para>

            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting>       <para>
                Ez a programkód már helyes. Az 'f()' függvény egy paramétert kér amit az 'a'-val megkap, és ennek az eredménye lesz kiírva.
                </para>
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting> 
                <para>
                	Itt is az 'f()' függvény értékét fogjuk kiírni, csak azzal a különbséggel, hogy egy memóriacímre mutató értéket fog kapni a függvény.
                </para>
            </listitem>
        </orderedlist>
        <para>
            Megoldás forrása:  https://github.com/Drcsonka/Prog1/blob/master/Forrasolv.c
        </para>

        <para>
            Megoldás videó: 
        </para>

        <para>
            A program lefutasa elohiv egy vegtelen ciklust, amibol a CTRL + C billentyukombinacioval sem tudunk kilepni.

        </para>
        <para>
        	A 'splint' egy olyan eszköz ami segít megnézni 'C'-ben írt kódokat, és azokban hibákat találni.
        </para>

    </section>                     

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <programlisting language="tex"><![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$ 

$(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$ 

$(\exists y \forall x (x \text{ prím}) \supset (x<y)) $ 

$(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$
]]></programlisting>        
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX</link>
        </para>

        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/ZexiPy3ZxsA">https://youtu.be/ZexiPy3ZxsA</link>, <link xlink:href="https://youtu.be/AJSXOQFF_wk">https://youtu.be/AJSXOQFF_wk</link>
        </para>

        <para>
            A feladat megoldásához a LaTeX szövegformázó rendszert kell használnunk.
            A feladat leírásában olvasható parancsokat a szoftver matematikai kifejezésekké alakítja át, majd PDF formában lementve mindenki számára jól értelmezhető formát kapnak.
        </para>
    </section>                                                                                                                                                                            

    <section>
        <title>Deklaráció</title>
            
        <para>
            Vezesd be egy programba (forduljon le) a következőket: 
        </para>

        <itemizedlist>
            <listitem>
                <para>egész</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egész referenciája</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>                        
            </listitem>            
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>                        
            </listitem>            
        </itemizedlist>            

       <para>
            Mit vezetnek be a programba a következő nevek?
        </para>

        <itemizedlist>
            <listitem>
                <programlisting><![CDATA[int a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *b = &a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int &r = a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int c[5];]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (&tr)[5] = c;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *d[5];]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *h ();]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *(*l) ();]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting>            
            </listitem>            
            <listitem>
                <programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>            
            </listitem>            
        </itemizedlist>       


        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  https://github.com/Drcsonka/Prog1/blob/master/Deklaracio.c
        </para>
        <para>
            A fajlban fel vannak tuntetve, hogy melyik a milyen valtozot deklaral a program azon resze.
        </para>
    </section>                     


</chapter>                
