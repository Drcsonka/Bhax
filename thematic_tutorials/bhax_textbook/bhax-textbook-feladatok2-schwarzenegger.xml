<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Lauda!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Port scan</title>
        <para>
            Mutassunk rá ebben a port szkennelő forrásban a kivételkezelés szerepére!
            https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#id527287
        </para>
        <para>
            Megoldás forrása:                
        </para>
	    
	    <para>
	        <programlisting>
                <![CDATA[
                
public class KapuSzkenner 
{
    
    public static void main(String[] args) 
    {
        
        for(int i=0; i<1024; ++i)
        {
            try 
            {
                
                java.net.Socket socket = new java.net.Socket(args[0], i);
                
                System.out.println(i + " figyeli");
                
                socket.close();
                
            } 
            
            catch (Exception e) 
            {
                
                System.out.println(i + " nem figyeli");
                
            }
       }
    }
    
}
]]>
            </programlisting>
	    </para>
	    
	    <para>
	    
	    A programunk egy "for" ciklussal fog kezdődni ami 0-1023-ig fog menni. 
	    Majd benne van egy "try-catch" hibakezelési funkció, ami úgy fog számunkra működni
	    ,hogy a "try" részben megírt kód megpróbál lefutni és ha hibába fut, a "catch"-ünk elkapja
	    es a benne lévő kód fog lefutni ( általában egy hibaüzenet ). Jelen esetben a "try"-ban a 
	    "for" ciklus jelenlegi tagjához egy új "socket"-et hoz létre ami két gép közötti kommunikációs
	    végpont és ezt nézi, hogy sikerül-e és ha igen melyik "port"-ra.
	    </para>
	        <para>
	            <mediaobject>
	                <imageobject>
	                    <imagedata fileref="images/portscan.png" scale="60" />
	                </imageobject>
	            </mediaobject>
	        </para>
	        

    </section>        

    <section>
        <title>AOP</title>
        <para>
            Szőj bele egy átszövő vonatkozást az első védési programod Java átiratába! (Sztenderd védési
            feladat volt korábban.)
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
        
        AOP-al lehetőségünk lesz külső fájlból viselkedést adni a programunkhoz erre azért lesz szükségünk mert a feladatunk
        az, hogy két fajta kiíratást "összeszőjünk" vagyis például az eredeti inorder kiíratás mellé preorderben is kiírjuk.
        Ehhez szükségünk lesz a "kiir" függvényre, amit egy "pointcut"-ba helyezzük. Ezek a "pointcut"-ok tartalmazzák a join pontokat,
        amik lehetnek konstruktor hívás vagy függvényhívás. Majd van még az "advice" ami a join pontok meghívása előtti és utáni történéseket lehet adni.
        
        A call-al majd meghívjuk a kiir függvényt ami majd már join-oltunk a AspectJ-s kóddal, ezután az "after" függvénnyel megjelenítjük a "kiir"
        vagyis az eredeti inordert és a hozzácsatolt preordert is.
        
        </para>
        <para>
            <programlisting>
                
                <![CDATA[
package binfa;
import java.io.FileNotFoundException;
import java.io.IOException;
public aspect order 
{
	int melyseg = 0;
	
	public pointcut travel(LZWBinFa.Csomopont elem, java.io.PrintWriter os) 
		: call(public void LZWBinFa.kiir(LZWBinFa.Csomopont, java.io.PrintWriter)) && args(elem,os);
	after(LZWBinFa.Csomopont elem, java.io.PrintWriter os) throws IOException : travel(elem, os)
	
	{
		java.io.PrintWriter kiPre = new java.io.PrintWriter(
				new java.io.BufferedWriter(new java.io.FileWriter("preorder.txt")));
		melyseg = 0;
		preorder(elem, kiPre);
		kiPre.close();
	}
	
	public void preorder(LZWBinFa.Csomopont elem, java.io.PrintWriter p) 
	
	{
	
		if (elem != null) 
		
		{
			++melyseg;
			for (int i = 0; i < melyseg; ++i) 
			{
				p.print("---");
			}
			p.print(elem.getBetu());
			p.print("(");
			p.print(melyseg - 1);
			p.println(")");
			preorder(elem.egyesGyermek(), p);
			preorder(elem.nullasGyermek(), p);
			--melyseg;
		}
	}
}]]>
</programlisting>
        </para>
    </section>
    
    <section>
        <title>Android Játék</title>
        <para>
            Írjunk egy egyszerű Androidos „játékot”! Építkezzünk például a 2. hét „Helló, Android!” feladatára!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            
            
        </para>
    </section>     
    
    <section>
        <title>Junit teszt</title>
        <para>
            A https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat
            poszt kézzel számított mélységét és szórását dolgozd be egy Junit tesztbe (sztenderd védési feladat
            volt korábban).
        </para>

        <para>
            Megoldás forrása:                
        </para>
        <para>
            
            A Junit egy olyan keretrendszer, ameny java program tesztelésére szolgál.
            A binfa program által számolt  átlag,mélység és helyessége a célunk. A "01111001001001000111"
            inputot nézzük meg, hogy a kézzel számolt értékek mennyire közelít a program által számoltal.
            
        </para>
        <para>
            <programlisting language="java">
        <![CDATA[
        import static org.junit.jupiter.api.Assertions.*;

    import org.junit.jupiter.api.Test;

    class BinfaTest 
    {
	   BinfaTest binfa= new BinfaTest();
	   String testInput= "01111001001001000111";
	   @Test
	   void test() {
		  for(int i=0;i<testInput.length();i++) 
		  {
		  	binfa.addItem(testInput.charAt(i));
		  }
		

		
		assertEquals(2.75, binfa.getAtlag(),0.01);
		assertEquals(4, binfa.getMelyseg(),0.001);
		assertEquals(0.957427, binfa.getSzoras(),0.00001);
	}

}
        ]]>
</programlisting>
        </para>
        <para>
            
                Ennek a teszt elvégzéséhez, egy új "Binfatest" osztályt hozunk létre, amiben létrehozunk egy új 
                fa objektumot, aminek megadjuk az előbb beszélt inputot.
                A "test()" metódusban létrehozzuk a fát, majd egy "for()" ciklussal végigfutunk az input karakterein,
                és ezeket a fába teszi.
                Ezután az "assertEquals" metódussal ellenőrizzük a programunkat. Az első paramétere
                az általunk megaadott számolási értékek lesznek, a második a gép által számolt érték, a hamradik 
                pedig a megengedett eltérés mértéke. Ha a két érték ezen az eltérési értéken belül vannak akkor jól működik a programunk.
        
        
        </para>
    </section>   
    
    <section>
        <title>OSCI</title>
        <para>
            Készíts egyszerű C++/OpenGL-es megjelenítőt, amiben egy kocsit irányítasz az úton. 
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            
            
        </para>
    </section>  

</chapter>                
