<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Godel!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Gengszterek</title>
        <para>
Gengszterek rendezése lambdával a Robotautó Világbajnokságban
https://youtu.be/DL6iQwPx1Yw (8:05-től)
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para> A Robotautó Világbajnokság célja a forgalomirányítási algoritmusok kutatása és a self
            driving cars vagyis a "robotautók" elterjedésének vizsgálata. A C++11-ben megjelenő
            "lambda" kifejezések által egy vagy többsoros névtelen függvényeket definiálhatunk a
            kódunkban. Általános alakja: <programlisting language="C++"><![CDATA[
[](int x, int y) { return x + y; }]]>
</programlisting> Az elején a szögletes zárójelpár azt jelzi,
            hogy egy "lambda" kifejezés következni. A sima zárójel függvényhívást fog jelenteni. <programlisting language="java"><![CDATA[
            std::sort ( gangsters.begin(), gangsters.end(), [this, cop] ( Gangster x, Gangster y )
            {
                return dst ( cop, x.to ) < dst ( cop, y.to );
            } );
            ]]>
          </programlisting> A sort függvényt fogjuk használni ebben a példában,
            aminek van 2 és 3 paraméteres változata is, ebben az esetben a 3 paraméterest fogjuk
            használni mégpedig az első paraméter lesz a "gangsters.begin()" a második a
            "gangsters.end()", ami az első gangster elemének az indexet és az utolsóját fogja
            megadni. A "sort" függvényünk 3. tagja a "cop"-al kezdődik és a másik 2 értékünk két
            gangster oszályú objektum ami alapján megnézzük a "cop"-tól való távolságukat és növekvő
            sorrendbe rendezzük ezeket.</para>
    </section>        

    <section>
        <title>C++11 Custom Allocator</title>
        <para>
            https://prezi.com/jvvbytkwgsxj/high-level-programming-languages-2-c11-allocators/ a
CustomAlloc-os példa, lásd C forrást az UDPROG repóban!
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <programlisting language="C++">
                <![CDATA[ 
#include <stddef.h>
            #include <cxxabi.h>
            #include <iostream>
            #include <vector>
template<typename T>
class CustomAlloc
{
public:
    CustomAlloc() {}
    CustomAlloc(const CustomAlloc&) {}
    ~CustomAlloc() {}

    using pointer = T*;
    
    using value_type = T;
    
    using const_pointer = const T*;
    
    using size_type = size_t;
    
    using reference = T&;
    
    using const_reference = const T&;
    
    using difference_type = ptrdiff_t;

    pointer allocate( size_type n){
        int s;
        char* p = abi::__cxa_demangle( typeid (T).name(), 0, 0, &s);
        std::cout << "Allocating "
                  << n << " objects of "
                  << n*sizeof (T)
                  << " bytes. "
                  << typeid (T).name() << "=" << p
                  << std::endl;
        delete p;
        return reinterpret_cast<T*>(new char[n*sizeof(T)]);
    }

    void deallocate (pointer p, size_type n){
        delete[] reinterpret_cast<char *>(p);
        std::cout << "Deallocating "
                  << n << " objects of "
                  << n*sizeof (T)
                  << " bytes. "
                  << typeid (T).name() << "=" << p
                  << std::endl;

    }
};

            
            int main(int argc, char* argv[]) {
            
              std::vector<int, CustomAlloc<int>> v;
            
              v.push_back(1);
              v.push_back(2);
              v.push_back(3);
              v.push_back(4);
              v.push_back(5);
              v.push_back(6);
              v.push_back(7);
              v.push_back(8);
              return 0;
            }]]>
</programlisting>
        </para>
        <para>
        Egy objektum példányosításakor a memóriában lefoglalódik az ahhoz szükséges terület, C++-ban
        a "new" operátor használjuk ami meghívja az alapértelmezett allokátort.
        Ez teljesen megfelel a normális használatra de ha bele szeretnénk szolni a folyamatban 
        és a memóriakezelésben akkor saját allokátort kell készítenünk ezt a "CustomAlloc" oszállyal fogjuk megvalósítani.
        </para>
        <para>
        <programlisting>
            CustomAlloc() {}
        </programlisting>
        </para>
        <para>
            Ezután a "using"-ot fogjuk használni ezzel nevet adva például a pointernek ami itt a "T*" lesz, vagy például a "size_typenak" "size_t"
        </para>
        <para>
            <programlisting>
                using pointer = T*;
                
                using size_type = size_t;
                </programlisting>
        </para>
        <para>
            <programlisting>
            pointer allocate( size_type n){
        int s;
                </programlisting>
        </para>
        <para>
            Az "allocate" funkciónk egy pointert fog vissza adni aminek a paramétere 
            "size_type" lesz ami majd a szükséges memóriaterületet fogja lefoglalni.
        </para>
        <para>
            <programlisting>
                char* p = abi::__cxa_demangle( typeid (T).name(), 0, 0, &amp;s);
        std::cout &lt;&lt; "Allocating "
                  &lt;&lt; n &lt;&lt; " objects of "
                  &lt;&lt; n*sizeof (T)
                  &lt;&lt; " bytes. "
                  &lt;&lt; typeid (T).name() &lt;&lt; "=" &lt;&lt; p
                  &lt;&lt; std::endl;
        delete p;
        return reinterpret_cast&lt;T*>(new char[n*sizeof(T)]);
            </programlisting>
        </para>
        <para>
            A 'p' változónkban tároljuk el a "__cxa_demangle" funkción belül a "typeid(T).name()" által visszafejtett típus típusazonosítóját.
            Majd kiíratjuk hogy hány objetumnak foglaltunk helyet és ezt hány bájton tettük meg. 
            Ezután töröljük a "p"-t és visszatérünk a "T*" által mutatott lefoglalt területre.
        </para>
        <para>
            <programlisting>
                void deallocate (pointer p, size_type n){
        delete[] reinterpret_cast&lt;char *>(p);
        std::cout &lt;&lt; "Deallocating "
                  &lt;&lt; n &lt;&lt; " objects of "
                  &lt;&lt; n*sizeof (T)
                  &lt;&lt; " bytes. "
                  &lt;&lt; typeid (T).name() &lt;&lt; "=" &lt;&lt; p
                  &lt;&lt; std::endl;

    }
            </programlisting>
        </para>
        <para>
            A dellocate-at szabadítjuk majd fel a lefoglalt memóriaterületeket.
        </para>
        
        <para>
            Végül létrehozunk egy vektort aminek megadjuk a "CustomAlloc" és "push_back()" el teszünk bele egy keveset.
        </para>
        
        <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/alloc.png" scale="50" align="center"></imagedata>
                </imageobject>
            </mediaobject>
        </para>
        
    </section>        
        
<section>
        <title>STL map érték szerinti rendezése</title>
        <para>
Például: https://github.com/nbatfai/future/blob/master/cs/F9F2/fenykard.cpp#L180
        </para>
    <para>
        <programlisting language="c++">
<![CDATA[std::vector<std::pair<std::string, int>> sort_map ( std::map <std::string, int> &rank )
{
        std::vector<std::pair<std::string, int>> ordered;
        for ( auto & i : rank ) {
                if ( i.second ) {
                        std::pair<std::string, int> p {i.first, i.second};
                        ordered.push_back ( p );
                }
        }
        std::sort (
                std::begin ( ordered ), std::end ( ordered ),
        [ = ] ( auto && p1, auto && p2 ) {
                return p1.second > p2.second;
        }
        );
        return ordered;
}
        ]]>
	
        </programlisting>
    </para>
    <para>
        A feladatunk az hogy ne a kulcs alapján rendezzünk a "map"-ot hanem az érték mező szerint.
        Először is létrehozunk egy "pair" vektort ebbe átrakjuk az eddigi adatainkat.
        Majd ebben a vektorban fogjuk csak rendezni az elemeket lambda kifejezés segítségével 
        csökkenő sorrendbe, betöltjük az ordered vektorba, és visszaadjuk az "ordered" vektort.
        
    </para>
    </section>
<section>
        <title>Alternatív Tabella rendezése</title>
        <para>
Mutassuk be a https://progpater.blog.hu/2011/03/11/alternativ_tabella a programban a java.lang
Interface Comparable szerepét!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>
<section>
        <title>Prolog családfa</title>
        <para>
Ágyazd be a Prolog családfa programot C++ vagy Java programba! Lásd para_prog_guide.pdf!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>
<section>
        <title>GIMP Scheme hack</title>
        <para>
Ha az előző félévben nem dolgoztad fel a témát (például a mandalás vagy a króm szöveges
dobozosat) akkor itt az alkalom!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
</chapter>                
