<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Welch!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Első osztályom</title>
        <para>
            Valósítsd meg C++-ban és Java-ban az módosított polártranszformációs algoritmust! A matek háttér 
            teljesen irreleváns, csak annyiban érdekes, hogy az algoritmus egy számítása során két normálist
            számol ki, az egyiket elspájzolod és egy további logikai taggal az osztályban jelzed, hogy van vagy
            nincs eltéve kiszámolt szám.
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:   https://github.com/Drcsonka/Prog1/blob/master/polargen.cpp
             		https://github.com/Drcsonka/Prog1/blob/master/polargenerator.java
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... térj ki arra is, hogy a JDK forrásaiban a Sun programozói
            pont úgy csinálták meg ahogyan te is, azaz az OO nemhogy nem nehéz, hanem éppen természetes neked!
        </para>
        <para>
		A feladatot 'C++'-ban és Javaban is megoldjuk. Kezdve 'C++'-al.
        </para>                
        <para>
            Először is csinálunk egy osztályt, itt fog elhelyezkedni a Konstruktor és a Dekonstruktor is aminek a neveinek meg kell egyeznie az osztályunk nevével. A konstruktor objektumok létrehozásához kell majd míg a Dekonstruktor az ezek törléséhez.
        </para>
        <para>
            Az osztályban található még a 'tarolt', 'nincsTarolt' változók és a 'kovetkezo()' függvény is. A 'kovetkezo()' függvény egy double típusú értéket fog visszaadni. A 'nincsTárolt' egy boolean típusú változó ami azt fogja nekünk jelezni, hogy van-e eltárolva számunkra kiszámolt szám.   
        </para>
        <para>
            Amennyiben a 'nincstárolt' hamis, a program az eltárolt elemet adja vissza a függvénynek. Ha viszont igaz akkor, egy do-while ciklusban, megnézzük, hogy 'w' nagyobb-e mint 'u1' és 'u2', ha igen kap egy random számot a 'srand()' függvénytől, eközben a 'v1' és 'v2' megkapja 'u1' és 'u2' értékét. A 'w' új értéket kap a 'tárolt'-al együtt. Majd a 'nincstárolt' értéke hamis-ra változik mivel már nem fog elemet tartalmazni.
        </para>
        <para>
            A feladat Java-ban nagyon hasonló és könyebb is mint a C++-os megoldás.
        </para>
        <para>
            Itt is létrehozunk egy osztályt aminek a neve 'PolárGenerátor' lesz. Ez egy publikus osztály ami azt jelenti, hogy a benne lévő egységeket az osztályon kívülről is meg lehet hívni. Itt deklaráljuk a  'nincsTárolt' változót, és a 'következő()' függvényt is, ugyan úgy mint C++-ban. A 'nincsTárolt'-os ciklus is ugyan az mint C++-ban ugyan az lesz, a random szám generáláson kívül. Javában a 'Math.random()' függvény segítségével nagyon könnyedén tudunk random számokat generálni.
        </para>
    </section>        

    <section>
        <title>LZW</title>
        <para>
            Valósítsd meg C-ben az LZW algoritmus fa-építését!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:     https://github.com/Drcsonka/Prog1/blob/master/lzw.c           
        </para>
	<para>
		Ezzel a feladattal már foglalkoztunk Bev. Prog. órán.
		A program lényege, hogy a bemeneti fájl tartalmát átalakítja és kiírja a bináris 			fáját egy külön fájlba.
		A fa építés elve, hogy amikor a programunk kap egy 1-est vagy 0-ást megnézi, hogy az aktuális csomópont tartalmazza-e azt az elemet. Ha nem betesszük a jelenlegi csomópont gyermekeként. Amennyiben viszont igen akkor csinálunk egy új csomópontot és annak lesz a gyermeke.
	</para>
    <para>
        A programban az 'uj_elem()' függvényben fogjuk lefoglalni a memóriaterületeket, de hibával tér vissza ha nem sikerül elegendő memóriát foglalni. A 'malloc' függvény segítségével fogunk memóriát lefoglalni, ennek paramétere a 'BINFA' váltózó lesz. 
    </para>
    <para>
        A 'szabadit()' függvénnyel fogjuk felszabadítani a jelenlegi fa bal- és jobb oldala által foglalt memóriát. A 'free()' függvénnyel a lefoglalt tárterületet szabadítjuk fel.
    </para>
    </section>        
        
    <section>
        <title>Fabejárás</title>
        <para>
            Járd be az előző (inorder bejárású) fát pre- és posztorder is!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  https://github.com/Drcsonka/Prog1/blob/master/lzwpost.c
              https://github.com/Drcsonka/Prog1/blob/master/lzwpre.c
        </para>
	<para>

		A fabejárás előtt megnézzük, hogy a bejárandó fa üres-e.
		Preorder bejárásnál elhelyezzük a gyökérelemet a sor végére.
		Majd először a gyökérelem bal oldali részfáját, ezután a jobb oldali részfáját 			járjuk be. 

	</para>
	<para>
		Postorder a Preorder ellentéte, ilyenkor először a gyökérelem bal oldali 			részfáját, majd a jobb oldali részfáját járjuk be, és csak ezután dolgozzuk fel a 			gyökérelemet.

	</para>
    </section>        
                        
    <section>
        <title>Tag a gyökér</title>
        <para>
            Az LZW algoritmust ültesd át egy C++ osztályba, legyen egy Tree és egy beágyazott Node
            osztálya. A gyökér csomópont legyen kompozícióban a fával!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:     https://github.com/Drcsonka/Prog1/blob/master/z3a7.cpp           
        </para>
	<para>
	Ebben a feladatban megint az eddig használt LZW binfa programot fogjuk használni.
    Csak C++-ban írva és nem C-ben.
</para>
<para>
     Az első változás abban lesz, hogy itt már használhatunk osztályokat. Az osztályokban nemcsak változókat, hanem függvényeket is írhatunk. Az osztályokban deklarált függvényeket az osztályon kívül definiáljuk.
</para>
<para>
      Még egy érdekesség az operátor túlterhelés ami segítségével az módosítani tudjuk, hogy egy operátor mit csináljon. A programban arra használjuk, hogy a bemenetként kapott elemeket a fába shifteljük, az 'LZW' algoritmusnak megfelelően.
</para>
<para>
  Ha a programunk 0-at kap, akkor megnézzük, hogy az jelenlegi csomópontunknak van e 0-ás gyermeke. Ha nincs, akkor először a 'new'-val lefoglaljuk a tárterületet és egy új csomópontot hozunk létre. Ezután az aktuális csomópont nullás gyermekét ráallítjuk az új csomópontra és a fával visszaállunk a gyökérre.Ha viszont van nullás gyerkmek, akkor a fa mutatóját állítjuk rá. Ha 1-est kapunk akkor is ugyan ez történik.
	</para>
    </section>        
                
    <section>
        <title>Mutató a gyökér</title>
        <para>
            Írd át az előző forrást, hogy a gyökér csomópont ne kompozícióban, csak aggregációban legyen a 
            fával!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  https://github.com/Drcsonka/Prog1/blob/master/z3a72.cpp
        </para>
<para>


	Az előző feladathoz képest az fog most különbözni, hogy most a gyökér is mutató lesz.
	Most mindenhol, ahol eddig a gyökeret referenciaként adtuk át a mutatónak, most enélkül fogjuk. Helyet foglalunk a memóriában és erre állítjuk rá a fát.
	</para>
    </section>                     

    <section>
        <title>Mozgató szemantika</title>
        <para>
            Írj az előző programhoz mozgató konstruktort és értékadást, a mozgató konstruktor legyen a mozgató
            értékadásra alapozva!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  https://github.com/Drcsonka/Prog1/blob/master/z3a73.cpp
        </para>

	<para>     

	</para>
    </section>                     

</chapter>                
