<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Gutenberg!</title>
        <keywordset>
            <keyword/>
        </keywordset>
        <cover>
            <para>
                Programozás tankönyvek rövid olvasónaplói.
            </para>
        </cover>
    </info>
    <section>
        <title>Programozási alapfogalmak</title>
        <para>         
            <citation>PICI</citation>       
        </para>
	<para>
	1.2
	</para>
	<para>
	Megismerjük a programozási nyelvek 3 szintjét. Ezek a gépi nyelv, az assembly nyelv és a magas szintű nyelv. A könyvben a magas szintű nyelvvel fogunk jobban foglalkozni, ezeket forrásprogramnak is szokták hívni. A processzorok nem tudják értelmezni a forrásprogramokat ezért szükség van fordítóprogramokra, amik gépi kódú programot készít. Ennek lépései :Lexikális elemzés, szintaktikai elemzés, kódgenerálás. Megismerjük ezen kívül a szintaktika és a semantika fogalmait.
	</para>
	<para>
	1.3
	</para>
	<para>
	A nyelveket 2 nagy részre lehet bontani, ez a kettő az Imperattív nyelv és a Dekleratív nyelv.
	</para>
	<para>
	
Az imperatív nyelv jellemzői: Algoritimikus nyelvek, utasítások sorozatára épülnek fel, szorosan kötődnek a Neumann-arcthitektúrához, legfőbb eszköze a változók.
Két alcsoportja van az objektumorientált nyelvek és az eljárásorientált nyelvek.
	</para>
	<para>
	
A dekleratív nyelvre jellemző: Nem algoritmikus nyelv,  nincs lehetőség memóriaműveletekre.
Két alcsoportja: a logikai nyelv és a funkcionális nyelv.
	</para>
	<para>
	2.1
	</para>
	<para>
	A program legkisebb alkotórésze a karakter. Általában a karaktereket kategorizálják, betűknek, számjegyeknek vagy egyéb karaktereknek.
Ide tartoznak a szimbolikus nyelvek is. Ennek két része van a kulcsszó és az azonotító. Az azonosító a felhasználó számára van, hogy arra ezzel tudjon hivatkozni az előző elemekre. A kulcsszó viszont az nyelvnek van, és ezt felhasználóként nem tudjuk megváltoztatni.
	</para>
	<para>
	2.4
	</para>
	<para>
	A programnyelveknek vannak adatípusaik is. Ezek lehetnek a programozási nyelv által megadott típusok vagy a felhasználó is hozhat létre típusokat, ilyenkor meg kell adni a típus tartományát, műveleteit és ábrázolási módját. Az adattípusoknak két nagy csoportja van, az egyszerű és az öszetett típus. Ezekből egy pár példa: az egész számok, tömbök, listák, karakterek, logikai. 
	</para>
	<para>
	2.4.3 
	</para>
	<para>
	A mutató típus egy egyszerű típusu adattípus. Tárcímeket tárol. Ha nem mutatnak sehova akkor 'NULL' értékre mutatnak. Velük tudunk indirektül címezni.
	</para>
	<para>
	2.5
	</para>
	<para>
	Nevesített konstansoknak 3 komponesből állnak, a névből, típusból és értékből. Ezt a konstanst mindig deklarálni kell. A deklarációnál kap egy értéket ami megváltoztathatatlan lesz később. Az a feladatuk, hogy a rendszeresen használt értékeknek egy más / könyebb nevet ad.
	</para>
	<para>
	2.6
	</para>
	<para>
	A változók 4 komponensből állnak, a névből, attríbútumokból, címekből és értékekből. A név az egy egyedi azonosító, az attríbútum a változó futás közbeni működéséről felel. A változóknak érétéket rendelhetünk aminek két fajtája van, az explicit, implicit és automatikus deklaráció. A változó címe a változó helyét határozza meg. Ezt megtehetjük több módon is, például statikus kiosztás, dinamikus kiosztás, és a felhasználó által kiosztás. Az érték komponense a bitkombináiót jelenti ami a címen helyezkedik el.
	</para>
	<para>
	2.7
	</para>
	<para>
	C-ben az alapelem típusáról van szó. Ez a kettő az aritmetikai típus, a számraztatott típús és a void típus.
	</para>
	<para>
	3.
	</para>
	<para>
	A kifejezések arra jók, hogy a már ismert értékekből új értéket csinálunk. Ennek két része van: az érték és a típus. Ezen kívül a zárójelezés menetét éritni, a konstans kifejezéseket és a tömbökről.
	</para>
	<para>
	4.
	</para>
	<para>
	Az utasításoknak két nagy csoportja van a deklarációs utasítások és a végrehajtható utasítások. A végrehajó utasításokból nagyon sok van, például a cikluszszervező, hívó, értékadó, üres, ugró stb.A ciklusszervező utasítások. Egy ciklus 3 részből áll, a fej, mag és a vég. A magban található az ismételendő kódrész. Az értékadó utasítás feladata például egy változó értékkomponensének beállítása.
	</para>
	<para>
	5.
	</para>
	<para>
	Egy program programegységekre tagolható amik az alprogram, blokk, csomag és a task. Az alprogramnak a használatára és fogalmáról beszél még. Az alprogram felépítése : Fej, specifikáció, törzs és a vég. A komponensei: név, formális paraméterlista, törzs, környezet. Az alprogramokat elég csak egyszer megírni és később csak elég hivatkozni rájuk. Két fajtája van: Eljárás és Függvény. Az függvény tetszőleges típusu eredményt ad vissza, viszont az Eljárásnak nincs visszatérési értéke de tevékenységet hajt végre.
	</para>
	<para>
	5.4 Paraméterkiértékelés függvény hívásánál kiértékeli az alprogram formális és aktuális paramétereit. Az aktuálist rendeljük hozzá a formálishoz, és olyan elven, hogy az elsőt az elsőhöz... stb.
	</para>
	<para>
	5.5
	</para>
	<para>
	A paraméterátadásnak több módja is van: érték szerinti, név szerinti,  cím szerinti, szöveg szerinti, eredmény szerinti, érték-eredmény, szerinti.
	</para>
	<para>
	Később a blokkról van szó. A fogalmaráról formalításáról. A hatáskör fogalma, név hatásköre és a lokális név fogalma.
	</para>
	<para>
	A nyelvek Input, Outputja nagyon különböznek. Említik a fogalmát, és hogy állományokba lehet írni, és ezekből tudunk dolgozni is.
	</para>
	<para>
	Kívételkezelés az az amikor a program figyel egy bizonyos eseményt és annak bekövetkezésére, reagál / csinál valamit.
	</para>
	<para>
	</para>
    </section>        
    <section>
        <title>Programozás bevezetés</title>
        <para>                
            <citation>KERNIGHANRITCHIE</citation>
        </para>
	<para>
	Az alapokról van szó a könyv elején. Például változótípusok: char ( 1 byte, egy karaktert tartalmaz), int (egész szám), float és a double. Különböző operátorok mint pl: +,-,*,/,%. A logikai operátorok és relációk.
	</para>
	<para>
	Vegyünk például az 'if' blokkot. Ez például áll a fejből 'if', ez után áll egy logikai rész, ami ha igaz akkor a benne lévő kód leful, amugy meg csak átlépődnek azon a kódrészleten és sosem fut le. If-else esetében viszont az 'if' résznél megadunk egy logikai kérdést, ha igen akkor lefut a kódrészletünk az 'if' alatt, ha viszont hamis akkor az 'else' rész utáni kód fog lefutni.
	</para>
	<para>
	A ciklusok például: for, while, do-while. A while ciklus úgy müködik, hogy addig fog végrehajtódni ameddig a fejében lévő kiértékelés 0 nem lesz.
A for ciklus 3 kifejezést tartalmaz a fejben. Az első hogy mettől, a második, hogy meddig, a harmadik, hogy milyen közzel. Es ez addig meg még az első érték el nem éri a második értéket.
	</para>
	<para>
	Több féle utasítás is van ezek például a: while, for, break, continue, return.
	</para>
	<para>
	A break utasítás ciklusokba lehet implementálni, és ez leállítja a ciklusunkat, amikor arra kerül a sor. 
	</para>
	<para>
	A return utasítás visszaad egy értéket.
	</para>
	<para>
	C-ben lehet címkére ugrani a goto utasítással.
	</para>
	<para>
	</para>
	<para>
            Megoldás videó: <link xlink:href="https://youtu.be/zmfT9miB-jY">https://youtu.be/zmfT9miB-jY</link>
        </para>        
    </section>        
    <section>
        <title>Programozás</title>
        <para>                
            <citation>BMECPP</citation>
        </para>
	<para>
	A C++ egy objektum orientált programozási nyelv mint a java. A könyv megmutatja a C és a C++ közötti változtatásokat és különbségeket. C++ például két függvénynek lehet ugyan az a neve ha az argumentumai különböznek. C++-ban függvényt meglehet hívni paraméter nélkül ilyenkor voiddal lesz egyenlő. Bevezetésre kerültek a refereciák és a bool változó is ami egy logikai érték, így igaz / hamis értéke lehet. Pointerekről is szó esik.
	</para>
	<para>
	Megismerjük az objektumorientáltság alapjait. Az objektumokat bevezeti az öröklés fogalmával együtt. Az objektum az egy osztály egy előfordulása.
	</para>
	<para>
	A 'private' kulcsszó azt csinálja, hogy az alatta deklarált változók és függvények csak benne láthatóak és kívülről nem meghívhatóak. Ezzel ellentétben a 'public' alatt deklarált függvények és váltózók az adott tagon kívül is látszódnak.
	</para>
	<para>
	A konstruktor és a dekonstruktor előre definiált függvények. A konstruktor biztosítja, hogy az, a feladathoz legyen elég nagy méretű tárterület számára, és legyen kezdeti értéke.
A dekonstruktor viszont ezt a lefoglalt területet szabadítja majd fel, vagy legalábbis segít benne.
	</para>
	<para>
	Operátor túlterhelésről is szó esik. Az operátorokról úgy általánosságban. Az operátorokra tekinthetünk speciális függvényekként is.
	</para>
	<para>
	Statikus tagok nem objektumokhoz hanem osztályokhoz tartoznak. Ezek objektum nélkül is használhatóak.
	</para>
	<para>
	A szabványos adatfolyam kicsit más C++ alatt, mivel itt bejön az 'istream' és 'ostream', vagyis az adatfolyamok bemenete és kimenete. Ezeknek operátoraik a >> és a forditott kacsacsőr duplán.
	</para>
	<para>
	A kivételkezelés abban segit nekünk vagy legalábbis azt biztosítja, hogy ha hiba merül fel akkor a program azt kezdi el kezelni azonnal.
	</para>
	<para>
	</para>
    </section>        
</chapter>                
